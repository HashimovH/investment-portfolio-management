<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="1" skipped="0" tests="2" time="0.770" timestamp="2023-09-25T19:01:10.573057" hostname="Hashimov"><testcase classname="tests.unit.repository.test_investment_repository" name="test_get_all_active_stocks" time="0.019"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: stocks&#10;[SQL: SELECT stocks.id, stocks.name, stocks.price, stocks.total_volume, stocks.active &#10;FROM stocks &#10;WHERE stocks.active = ? ORDER BY stocks.id DESC&#10; LIMIT ? OFFSET ?]&#10;[parameters: (1, 5, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x000001A13C71C880&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000001A13C7353D0&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000001A13C6F6D60&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x000001A13C6F6EB0&gt;, parameters = [(1, 5, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv\lib\site-packages\sqlalchemy\engine\base.py:1965: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000001A13C7353D0&gt;
cursor = &lt;sqlite3.Cursor object at 0x000001A13C7397A0&gt;
statement = 'SELECT stocks.id, stocks.name, stocks.price, stocks.total_volume, stocks.active \nFROM stocks \nWHERE stocks.active = ? ORDER BY stocks.id DESC\n LIMIT ? OFFSET ?'
parameters = (1, 5, 0), context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000001A13C6F6D60&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: stocks

venv\lib\site-packages\sqlalchemy\engine\default.py:921: OperationalError

The above exception was the direct cause of the following exception:

investment_repository = &lt;app.repository.investment.InvestmentRepository object at 0x000001A13C735040&gt;

    @pytest.mark.asyncio
    async def test_get_all_active_stocks(investment_repository):
&gt;       active_stocks = await investment_repository.get_all_active_stocks()

tests\unit\repository\test_investment_repository.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
app\repository\investment.py:11: in get_all_active_stocks
    result = await self._session.execute(stmt)
venv\lib\site-packages\sqlalchemy\orm\session.py:2262: in execute
    return self._execute_internal(
venv\lib\site-packages\sqlalchemy\orm\session.py:2144: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
venv\lib\site-packages\sqlalchemy\orm\context.py:293: in orm_execute_statement
    result = conn.execute(
venv\lib\site-packages\sqlalchemy\engine\base.py:1412: in execute
    return meth(
venv\lib\site-packages\sqlalchemy\sql\elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv\lib\site-packages\sqlalchemy\engine\base.py:1635: in _execute_clauseelement
    ret = self._execute_context(
venv\lib\site-packages\sqlalchemy\engine\base.py:1844: in _execute_context
    return self._exec_single_context(
venv\lib\site-packages\sqlalchemy\engine\base.py:1984: in _exec_single_context
    self._handle_dbapi_exception(
venv\lib\site-packages\sqlalchemy\engine\base.py:2339: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv\lib\site-packages\sqlalchemy\engine\base.py:1965: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000001A13C7353D0&gt;
cursor = &lt;sqlite3.Cursor object at 0x000001A13C7397A0&gt;
statement = 'SELECT stocks.id, stocks.name, stocks.price, stocks.total_volume, stocks.active \nFROM stocks \nWHERE stocks.active = ? ORDER BY stocks.id DESC\n LIMIT ? OFFSET ?'
parameters = (1, 5, 0), context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000001A13C6F6D60&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: stocks
E       [SQL: SELECT stocks.id, stocks.name, stocks.price, stocks.total_volume, stocks.active 
E       FROM stocks 
E       WHERE stocks.active = ? ORDER BY stocks.id DESC
E        LIMIT ? OFFSET ?]
E       [parameters: (1, 5, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv\lib\site-packages\sqlalchemy\engine\default.py:921: OperationalError</failure></testcase><testcase classname="tests.unit.repository.test_investment_repository" name="test_get_stock" time="0.004"><error message="failed on setup with &quot;file C:\Users\hashi\projects\investment-portfolio-management\tests\unit\repository\test_investment_repository.py, line 28&#10;  @pytest.mark.asyncio&#10;  async def test_get_stock(investment_repository, db_session):&#10;      # Add a test stock to the database&#10;      test_stock = Stock(name=&quot;Test Stock&quot;, price=25.0, active=1)&#10;      db_session.add(test_stock)&#10;      db_session.commit()&#10;&#10;      # Test the function&#10;      retrieved_stock = await investment_repository.get_stock(test_stock.id)&#10;      assert retrieved_stock.id == test_stock.id&#10;E       fixture 'db_session' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, async_session, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, investment_repository, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;C:\Users\hashi\projects\investment-portfolio-management\tests\unit\repository\test_investment_repository.py:28&quot;">file C:\Users\hashi\projects\investment-portfolio-management\tests\unit\repository\test_investment_repository.py, line 28
  @pytest.mark.asyncio
  async def test_get_stock(investment_repository, db_session):
      # Add a test stock to the database
      test_stock = Stock(name="Test Stock", price=25.0, active=1)
      db_session.add(test_stock)
      db_session.commit()

      # Test the function
      retrieved_stock = await investment_repository.get_stock(test_stock.id)
      assert retrieved_stock.id == test_stock.id
E       fixture 'db_session' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, async_session, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, event_loop, investment_repository, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\hashi\projects\investment-portfolio-management\tests\unit\repository\test_investment_repository.py:28</error></testcase></testsuite></testsuites>